#+title: Support de la vectorisation dans Verificarlo
#+author: Safecarlo
#+date: 2020

* Vectorisation
** Schéma

[[./scheme_2.png]]

** vfcinstruments

   Nous avons un peu regardé le fichier *libVFCInstrument.cpp* pour voir
   comment *vfcinstrument* insert les probes vectorielles contenue
   dans les wrappers.

   D'abbord il vérifie si le type est un vecteur et ensuite détermine
   la taille du vecteur :

   #+BEGIN_SRC c
    if (opType->isVectorTy()) {
      VectorType *t = static_cast<VectorType *>(opType);
      baseType = t->getElementType();
      size = t->getNumElements();

      if (size == 2) {
        vectorName = "2x";
      } else if (size == 4) {
        vectorName = "4x";
      } else if (size == 8) {
        vectorName = "8x";
      } else if (size == 16) {
        vectorName = "16x";
      } else {
        errs() << "Unsuported vector size: " << size << "\n";
        return nullptr;
      }
    }
   #+END_SRC

   Et ensuite il concatene les différentes chaines de caractères pour
   insérer la bonnes probes :

#+BEGIN_SRC c
    // Build name of the helper function in vfcwrapper
    std::string mcaFunctionName = "_" + vectorName + baseTypeName + opName;
#+END_SRC

** Interface dans interflop.h

   Strucutre *sans* les interfaces des fonctions vectorielles des backends :

   #+BEGIN_SRC c

struct interflop_backend_interface_t {
  void (*interflop_add_float)(float a, float b, float *c, void *context);
  void (*interflop_sub_float)(float a, float b, float *c, void *context);
  void (*interflop_mul_float)(float a, float b, float *c, void *context);
  void (*interflop_div_float)(float a, float b, float *c, void *context);
  void (*interflop_cmp_float)(enum FCMP_PREDICATE p, float a, float b, int *c,
                              void *context);

  void (*interflop_add_double)(double a, double b, double *c, void *context);
  void (*interflop_sub_double)(double a, double b, double *c, void *context);
  void (*interflop_mul_double)(double a, double b, double *c, void *context);
  void (*interflop_div_double)(double a, double b, double *c, void *context);
  void (*interflop_cmp_double)(enum FCMP_PREDICATE p, double a, double b,
                               int *c, void *context);

  void (*interflop_enter_function)(interflop_function_stack_t *stack,
                                   void *context, int nb_args, va_list ap);

  void (*interflop_exit_function)(interflop_function_stack_t *stack,
                                  void *context, int nb_args, va_list ap);

  /* interflop_finalize: called at the end of the instrumented program
   * execution */
  void (*interflop_finalize)(void *context);
};

   #+END_SRC

   Strucutre *avec* les interfaces des fonctions vectorielles des backends :

   #+BEGIN_SRC c

struct interflop_backend_interface_t {
  void (*interflop_add_float)(float a, float b, float *c, void *context);
  void (*interflop_sub_float)(float a, float b, float *c, void *context);
  void (*interflop_mul_float)(float a, float b, float *c, void *context);
  void (*interflop_div_float)(float a, float b, float *c, void *context);
  void (*interflop_cmp_float)(enum FCMP_PREDICATE p, float a, float b, int *c,
                              void *context);

  void (*interflop_add_float_vector)(int size, float a, float b, float *c, void *context);
  void (*interflop_sub_float_vector)(int size, float a, float b, float *c, void *context);
  void (*interflop_mul_float_vector)(int size, float a, float b, float *c, void *context);
  void (*interflop_div_float_vector)(int size, float a, float b, float *c, void *context);
  void (*interflop_cmp_float_vector)(int size, enum FCMP_PREDICATE p, float a, float b, 
                                     int *c, void *context);

  void (*interflop_add_double)(double a, double b, double *c, void *context);
  void (*interflop_sub_double)(double a, double b, double *c, void *context);
  void (*interflop_mul_double)(double a, double b, double *c, void *context);
  void (*interflop_div_double)(double a, double b, double *c, void *context);
  void (*interflop_cmp_double)(enum FCMP_PREDICATE p, double a, double b,
                               int *c, void *context);

  void (*interflop_add_double_vector)(int size, double a, double b, double *c, void *context);
  void (*interflop_sub_double_vector)(int size, double a, double b, double *c, void *context);
  void (*interflop_mul_double_vector)(int size, double a, double b, double *c, void *context);
  void (*interflop_div_double_vector)(int size, double a, double b, double *c, void *context);
  void (*interflop_cmp_double_vector)(int size, enum FCMP_PREDICATE p, double a, double b,
                                      int *c, void *context);

  void (*interflop_enter_function)(interflop_function_stack_t *stack,
                                   void *context, int nb_args, va_list ap);

  void (*interflop_exit_function)(interflop_function_stack_t *stack,
                                  void *context, int nb_args, va_list ap);

  /* interflop_finalize: called at the end of the instrumented program
   * execution */
  void (*interflop_finalize)(void *context);
};

   #+END_SRC

   Nous avons ajouté des interfaces pour les vecteurs en général en
   rajoutant un paramètre qui est la taille du vecteur. Il faudra donc
   vérifier la taille dans les fonctions vectorielles des backends.

** Backends
*** Structure
**** ieee

   #+BEGIN_SRC c
  struct interflop_backend_interface_t interflop_backend_ieee = {
      _interflop_add_float,
      _interflop_sub_float,
      _interflop_mul_float,
      _interflop_div_float,
      _interflop_cmp_float,
      _interflop_add_float_vector,
      _interflop_sub_float_vector,
      _interflop_mul_float_vector,
      _interflop_div_float_vector,
      _interflop_cmp_float_vector,
      _interflop_add_double,
      _interflop_sub_double,
      _interflop_mul_double,
      _interflop_div_double,
      _interflop_cmp_double,
      _interflop_add_double_vector,
      _interflop_sub_double_vector,
      _interflop_mul_double_vector,
      _interflop_div_double_vector,
      _interflop_cmp_double_vector,
      NULL,
      NULL,
      NULL};
   #+END_SRC

**** vprec

   #+BEGIN_SRC c
  struct interflop_backend_interface_t interflop_backend_vprec = {
      _interflop_add_float,
      _interflop_sub_float,
      _interflop_mul_float,
      _interflop_div_float,
      NULL;
      _interflop_add_float_vector,
      _interflop_sub_float_vector,
      _interflop_mul_float_vector,
      _interflop_div_float_vector,
      NULL;
      _interflop_add_double,
      _interflop_sub_double,
      _interflop_mul_double,
      _interflop_div_double,
      NULL;
      _interflop_add_double_vector,
      _interflop_sub_double_vector,
      _interflop_mul_double_vector,
      _interflop_div_double_vector,
      NULL;
      NULL,
      NULL,
      NULL};
   #+END_SRC

**** mca

   #+BEGIN_SRC c
  struct interflop_backend_interface_t interflop_backend_mca = {
      _interflop_add_float,
      _interflop_sub_float,
      _interflop_mul_float,
      _interflop_div_float,
      NULL;
      _interflop_add_float_vector,
      _interflop_sub_float_vector,
      _interflop_mul_float_vector,
      _interflop_div_float_vector,
      NULL;
      _interflop_add_double,
      _interflop_sub_double,
      _interflop_mul_double,
      _interflop_div_double,
      NULL;
      _interflop_add_double_vector,
      _interflop_sub_double_vector,
      _interflop_mul_double_vector,
      _interflop_div_double_vector,
      NULL;
      NULL,
      NULL,
      NULL};
   #+END_SRC

*** Fonctions
