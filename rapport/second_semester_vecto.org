#+TITLE: Rapport Second Semestre pour le support de la Vectorisation
#+AUTHOR: Sholde
#+DATE: 2021

* Vectorisation du backend *vprec*

  Ce backend permet de gérer les cas des *dénormaux* et des nombres
  *infinis*. Cepandant ces cas restes rares dans les codes de calculs. C'est
  pourquoi nous avons décidé de priorisé la vectorisation pour les cas des
  *normaux*.

** Petit rappel des cas spéciaux

   Prenons comme exemple une précision de 3 et une taille de 2 pour un type flottant.
   - *cas normal:* exposant compris entre -1 et 1.
   - *cas dénormal:* exposant compris entre -2 et -4. Le bit de l'exposant est
     implicite et seul les valeur de la mantisse compte. Or ici la mantisse à 3
     bits, donc le cas des dénormaux s'étend sur 3 bits d'exposant.
   - *cas infinis:* exposant < -4 et exposant > 1.

   #+CAPTION: Rappel des cas spéciaux
   #+NAME: fig:rappel_des_cas_speciaux
   #+ATTR_LATEX: :width 200px
   [[../ressources/special_case.png]]

** Stuctures

   Le backend utilise des structures pour faciliter la compréhension des
   calculs. Or les structures comportent des types scalaires. Il faut donc créer
   de nouvelles structures pour les types vectorielles que proposent *clang*.

*** Flottant simple précision
**** Version scalaire

#+BEGIN_SRC c
typedef union {

  float f32;
  uint32_t u32;
  int32_t s32;

  /* Generic fields */
  float type;
  uint32_t u;

  struct {
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
    uint32_t sign : FLOAT_SIGN_SIZE;
    uint32_t exponent : FLOAT_EXP_SIZE;
    uint32_t mantissa : FLOAT_PMAN_SIZE;
#endif
#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__
    uint32_t mantissa : FLOAT_PMAN_SIZE;
    uint32_t exponent : FLOAT_EXP_SIZE;
    uint32_t sign : FLOAT_SIGN_SIZE;
#endif
  } ieee;

} binary32;
#+END_SRC

**** Version vectorielles

     Nous avons un problèmes car nous ne pouvant pas assigner une valeur par
     défault à un type vectoriel de *clang* dans une structure. On ne peut
     également pas initialisé ces arguments dans la fonction d'initialisation du
     backend *vprec* car ils font partis d'une structure et il faut que lorsque
     l'on créer cette structure n'importe ou dans le code, on puisse avoir les
     valeurs par défault. Donc la structure ci-dessous ne fonctionne pas.

#+BEGIN_SRC c
#if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__

#define define_binary32_vector(size)                                           \
  typedef union {                                                              \
                                                                               \
  float##size f32;                                                             \
  int##size u32;                                                               \
  int##size s32;                                                               \
                                                                               \
  /* Generic fields */                                                         \
  float##size type;                                                            \
  int##size u;                                                                 \
                                                                               \
  struct {                                                                     \
    int##size sign : FLOAT_SIGN_SIZE;                                          \
    int##size exponent : FLOAT_EXP_SIZE;                                       \
    int##size mantissa : FLOAT_PMAN_SIZE;                                      \
  } ieee;                                                                      \
                                                                               \
  } binary32_x##size;

#endif

#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__

#define define_binary32_vector(size)                                           \
  typedef union {                                                              \
                                                                               \
    float##size f32;                                                           \
    int##size u32;                                                             \
    int##size s32;                                                             \
                                                                               \
    /* Generic fields */                                                       \
    float##size type;                                                          \
    int##size u;                                                               \
                                                                               \
    struct {                                                                   \
      int##size mantissa : FLOAT_PMAN_SIZE;                                    \
      int##size exponent : FLOAT_EXP_SIZE;                                     \
      int##size sign : FLOAT_SIGN_SIZE;                                        \
    } ieee;                                                                    \
                                                                               \
  } binary32_x##size;

#endif

define_binary32_vector(2);
define_binary32_vector(4);
define_binary32_vector(8);
define_binary32_vector(16);
#+END_SRC

*** Flottant double précision

    En attente de la fin de la vectorisation des flottants simple précision.

** Fonctions

   Pour ce qui est des fonctions, elles utilisent elles aussi des types
   scalaires. Il faut donc créer des fonctions utilisant les types vectorielles.

*** Flottant simple précision

    Comme nous passons la taille du vecteur en paramètre il faut donc que l'on
    appelle la bonne fonction suivant la taille du vecteur.

    Pour ce qu'il est du calcul, c'est juste un calcul de vecteur comme dans le
    backend *ieee*.

#+BEGIN_SRC c
static inline void _vprec_binary32_binary_op_vector(const int size, float *a,
                                                    float *b, float *c,
                                                    const vprec_operation op,
                                                    void *context) {
  if ((VPRECLIB_MODE == vprecmode_full) || (VPRECLIB_MODE == vprecmode_ib)) {
    switch (size)
      {
      case 2:
        _vprec_round_binary32_float2(a, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        _vprec_round_binary32_float2(b, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 4:
        _vprec_round_binary32_float4(a, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        _vprec_round_binary32_float4(b, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 8:
        _vprec_round_binary32_float8(a, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        _vprec_round_binary32_float8(b, 1, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 16:
        _vprec_round_binary32_float16(a, 1, context, VPRECLIB_BINARY32_RANGE,
                                      VPRECLIB_BINARY32_PRECISION);
        _vprec_round_binary32_float16(b, 1, context, VPRECLIB_BINARY32_RANGE,
                                      VPRECLIB_BINARY32_PRECISION);
        break;
      default:
        break;
      }
  }

  perform_vector_binary_op(float, size, op, c, a, b);

  if ((VPRECLIB_MODE == vprecmode_full) || (VPRECLIB_MODE == vprecmode_ib)) {
    switch (size)
      {
      case 2:
        _vprec_round_binary32_float2(c, 0, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 4:
        _vprec_round_binary32_float4(c, 0, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 8:
        _vprec_round_binary32_float8(c, 0, context, VPRECLIB_BINARY32_RANGE,
                                     VPRECLIB_BINARY32_PRECISION);
        break;
      case 16:
        _vprec_round_binary32_float16(c, 0, context, VPRECLIB_BINARY32_RANGE,
                                      VPRECLIB_BINARY32_PRECISION);
        break;
      default:
        break;
      }
  }
}
#+END_SRC

*** Flottant double précision

    En attente des résultat des simples précision.

*** Gestion des arrondis

    Ici commence la vectorisation du bakend.

    Comme dit dans le préambule un nombre flottant peut être dans 3 catégories:
    normal, dénormal et infini. Etant donné que les 2 derniers cas reste des cas
    rares dans les codes de calculs. Nous avons décidé de vectoriser que le cas
    des nombres flottants normal.

    Mais pour pouvoir vectoriser il faut que tous les éléments de vecteurs aient
    le même comportement. C'est pourquoi on parcours une fois le vecteur élément
    par élément pour s'assurer que tout les éléments soit des nombres normaux.

    Si il s'avère qu'il y ai 1 nombre dénormal et 7 nombres normaux dans un
    vecteur de 8 flottants simple précision. Alors on reparcours le vecteurs
    pour gérer les 7 nombres normaux qui n'ont pas encore été traités.

    _Complexité:_
    - cas *size* nombres infini : O(2n)
    - cas *size* nombres dénormal : O(3n)
    - cas *size* nombres normal : O(3n)
    - sinon : O(4n)

#+BEGIN_SRC c
// Round the float vector with the given precision
#define define_vprec_round_binary32_vector(precision, size)                    \
  static void _vprec_round_binary32_##precision##size(float *a,                \
                                                      char is_input,           \
                                                      void *context,           \
                                                      int binary32_range,      \
                                                      int binary32_precision) {\
    t_context *currentContext = (t_context *)context;                          \
    int##size set = 0;                                                         \
    int count = 0;                                                             \
                                                                               \
    for (int i = 0; i < size; ++i) {                                           \
      if (!isfinite(a[i])) {                                                   \
        set[i] = 1;                                                            \
        count++;                                                               \
      }                                                                        \
    }                                                                          \
                                                                               \
    /* test if all vector is set */                                            \
    if (count == size) {                                                       \
      return;                                                                  \
    }                                                                          \
                                                                               \
    /* round to zero or set to infinity if underflow or overflow compare to */ \
    /* VPRECLIB_BINARY32_RANGE */                                              \
    int emax = (1 << (binary32_range - 1)) - 1;                                \
    /* here emin is the smallest exponent in the *normal* range */             \
    int emin = 1 - emax;                                                       \
                                                                               \
    binary32_##precision##size aexp = {.f32 = *(precision##size *)a};          \
    aexp.s32 = ((FLOAT_GET_EXP & aexp.u32) >> FLOAT_PMAN_SIZE);                \
    aexp.s32 -= FLOAT_EXP_COMP;                                                \
                                                                               \
    /* check for overflow in target range */                                   \
    int##size is_overflow = aexp.s32 > emax;                                   \
    for (int i = 0; i < size; i++) {                                           \
      if (is_overflow[i] && !set[i]) {                                         \
        a[i] = a[i] * INFINITY;                                                \
        set[i] = 1;                                                            \
        count++;                                                               \
      }                                                                        \
    }                                                                          \
                                                                               \
    /* test if all vector is set */                                            \
    if (count == size) {                                                       \
      return;                                                                  \
    }                                                                          \
                                                                               \
    int check = 0;                                                             \
                                                                               \
    for (int i = 0; i < size; i++) {                                           \
      /* check for underflow in target range */                                \
      if (aexp.s32[i] < emin && !set[i]) {                                     \
        /* underflow case: possibly a denormal */                              \
        if ((currentContext->daz && is_input) ||                               \
            (currentContext->ftz && !is_input)) {                              \
          /* preserve sign */                                                  \
          a[i] = a[i] * 0;                                                     \
        } else if (FP_ZERO == fpclassify(a[i])) {                              \
          continue;                                                            \
        } else {                                                               \
          if (currentContext->absErr == true) {                                \
            /* absolute error mode, or both absolute and relative error        \
               modes */                                                        \
            int binary32_precision_adjusted =                                  \
              compute_absErr_vprec_binary32(true, currentContext, 0,           \
                                            binary32_precision);               \
            a[i] = handle_binary32_denormal(a[i], emin,                        \
                                            binary32_precision_adjusted);      \
          } else {                                                             \
            /* relative error mode */                                          \
            a[i] = handle_binary32_denormal(a[i], emin, binary32_precision);   \
          }                                                                    \
        }                                                                      \
        set[i] = 1;                                                            \
        count++;                                                               \
      }                                                                        \
    }                                                                          \
                                                                               \
    /* test if all vector is set */                                            \
    if (count == size) {                                                       \
      return;                                                                  \
    } else if (count != 0) {                                                   \
      /* if one element is set we can't vectorized */                          \
      for (int i = 0; i < size; i++) {                                         \
        /* else, normal case: can be executed even if a                        \
           previously rounded and truncated as denormal */                     \
        if (currentContext->absErr == true) {                                  \
          /* absolute error mode, or both absolute and relative error modes */ \
          a[i] = handle_binary32_normal_absErr(a[i], aexp.s32[i],              \
                                               binary32_precision,             \
                                               currentContext);                \
        } else {                                                               \
          /* relative error mode */                                            \
          a[i] = round_binary32_normal(a[i], binary32_precision);              \
        }                                                                      \
      }                                                                        \
    } else {                                                                   \
      /* we can vectorize because we are sure that the vector is normal */     \
      /* else, normal case: can be executed even if a                          \
         previously rounded and truncated as denormal */                       \
      if (currentContext->absErr == true) {                                    \
        /* absolute error mode, or both absolute and relative error modes */   \
        handle_binary32_normal_absErr_x##size(a, aexp.s32,                     \
                                              binary32_precision,              \
                                              currentContext);                 \
      } else {                                                                 \
        /* relative error mode */                                              \
        round_binary32_normal_x##size(a, binary32_precision);                  \
      }                                                                        \
    }                                                                          \
  }
#+END_SRC

    Nous voyons que ce code utilise 2 fonctions pour gérer le cas des nombres
    normaux. Il faut donc vectoriser ces 2 fonctions.

*** Cas des nombres normaux
*** Cas des nombres normaux avec erreurs absolue

    Ici aussi on a opter pour la même technique de vectorisation. Comme on ne
    peut vectoriser le calcul que si tout les éléments du vecteurs ont le même
    comportement, on a choisis de vectoriser lorsque l'on se trouve dans le cas
    des nombres normaux. Car c'est le cas le plus fréquents.

    On parcours la aussi le vecteur éléments par éléments pour savoir si un
    élément du vecteur est en dessous de l'erreur absolue fixé. Si aucun élément
    n'est en dessous alors ils sont tous normaux et on peut vectoriser. Sinon on
    re-parcours le vecteur pour calculer les éléments normaux.

    _Complexité:_
    - cas 0 ou size éléments en dessous de la valeur absolue fixé : O(n)
    - cas entre 1 et size-1 éléments en dessous de la valeur absolue fixé :
      O(2n)

#+BEGIN_SRC c
#define define_handle_binary32_vector_normal_absErr(size)                      \
  void handle_binary32_normal_absErr_x##size(float *a,                         \
                                             int##size aexp,                   \
                                             int binary32_precision,           \
                                             t_context *currentContext) {      \
                                                                               \
    /* absolute error mode, or both absolute and relative error modes */       \
    int##size expDiff = aexp - currentContext->absErr_exp;                     \
    float##size retVal;                                                        \
    int##size set = 0;                                                         \
    int count = 0;                                                             \
                                                                               \
    for (int i = 0; i < size; i++) {                                           \
      if (expDiff[i] < -1) {                                                   \
        /* equivalent to underflow on the precision given by absolute error */ \
        a[i] = 0;                                                              \
        set[i] = 1;                                                            \
        count++;                                                               \
      } else if (expDiff[i] == -1) {                                           \
        /* case when the number is just below the absolute error threshold,    \
           but will round to one ulp on the format given by the absolute error;\
           this needs to be handled separately, as round_binary32_normal cannot\
           generate this number */                                             \
        a[i] = copysignf(exp2f(currentContext->absErr_exp), a[i]);             \
        set[i] = 1;                                                            \
        count++;                                                               \
      }                                                                        \
    }                                                                          \
                                                                               \
    if (count == 0) { /* we can vectorize */                                   \
      /* normal case for the absolute error mode */                            \
      int##size binary32_precision_adjusted =                                  \
        compute_absErr_vprec_binary32_x##size(false, currentContext, expDiff,  \
                                      binary32_precision);                     \
      round_binary32_normal_x##size(a, binary32_precision_adjusted);           \
    } else if (count == size) { /* all vector is set */                        \
      return;                                                                  \
    } else { /* we can't vectorize */                                          \
      for (int i = 0; i < size; i++) {                                         \
        if (!set[i]) {                                                         \
          int binary32_precision_adjusted =                                    \
            compute_absErr_vprec_binary32(false, currentContext, expDiff[i],   \
                                          binary32_precision);                 \
          round_binary32_normal_x(a[i], binary32_precision_adjusted);          \
        }                                                                      \
      }                                                                        \
    }                                                                          \
  }
#+END_SRC
